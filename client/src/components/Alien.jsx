/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/models/Alien.glb -o src/components/Alien.jsx -r public 
*/

import React, { useEffect, useState, useMemo } from "react"
import { useFrame, useGraph } from "@react-three/fiber"
import { useGLTF, useAnimations } from "@react-three/drei"
import { SkeletonUtils } from "three-stdlib"

const ANIMATION_FADE_DURATION = 0.3
const ANIMATION_BASE_NAME = "AlienArmature|Alien_"
const MOVEMENT_SPEED = 0.02

export function Alien({
	primaryColor = "#FF00FF",
	secondaryColor = "#FFFF00",
	...props
}) {
	const position = useMemo(() => props.position, [])

	const group = React.useRef()
	const { scene, materials, animations } = useGLTF("/models/Alien.glb")
	const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
	const { nodes } = useGraph(clone)
	const { actions } = useAnimations(animations, group)

	const [animation, setAnimation] = useState("Idle")

	useEffect(() => {
		actions[ANIMATION_BASE_NAME + animation]
			.reset()
			.fadeIn(ANIMATION_FADE_DURATION)
			.play()
		return () =>
			actions[ANIMATION_BASE_NAME + animation]?.fadeOut(
				ANIMATION_FADE_DURATION
			)
	}, [animation])

	useFrame(() => {
		if (group.current.position.distanceTo(props.position) > 0.1) {
			const direction = group.current.position
				.clone()
				.sub(props.position)
				.normalize()
				.multiplyScalar(MOVEMENT_SPEED)
			group.current.position.sub(direction)

			group.current.lookAt(props.position)
			setAnimation("Run")
		} else {
			setAnimation("Idle")
		}
	})

	return (
		<group
			ref={group}
			{...props}
			position={position}
			dispose={null}
			scale={0.4}
		>
			<group name="Root_Scene">
				<group name="RootNode">
					<group
						name="AlienArmature"
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
					>
						<primitive object={nodes.Bone} />
					</group>
					<group
						name="BaseAlien"
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}
					>
						<skinnedMesh
							name="BaseAlien_1"
							geometry={nodes.BaseAlien_1.geometry}
							material={materials.Stripe}
							skeleton={nodes.BaseAlien_1.skeleton}
						>
							<meshStandardMaterial color={secondaryColor} />
						</skinnedMesh>
						<skinnedMesh
							name="BaseAlien_2"
							geometry={nodes.BaseAlien_2.geometry}
							material={materials.Main}
							skeleton={nodes.BaseAlien_2.skeleton}
						>
							<meshStandardMaterial color={primaryColor} />
						</skinnedMesh>
						<skinnedMesh
							name="BaseAlien_3"
							geometry={nodes.BaseAlien_3.geometry}
							material={materials.Nails}
							skeleton={nodes.BaseAlien_3.skeleton}
						/>
						<skinnedMesh
							name="BaseAlien_4"
							geometry={nodes.BaseAlien_4.geometry}
							material={materials.Eyes}
							skeleton={nodes.BaseAlien_4.skeleton}
						/>
						<skinnedMesh
							name="BaseAlien_5"
							geometry={nodes.BaseAlien_5.geometry}
							material={materials.White}
							skeleton={nodes.BaseAlien_5.skeleton}
						/>
					</group>
				</group>
			</group>
		</group>
	)
}

useGLTF.preload("/models/Alien.glb")
